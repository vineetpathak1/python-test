# Parameters
target_mean = 1
target_std = .5
subsample_size=15
num_subsamples_to_keep = 5
num_subsamples_to_try = 10000

# This scoring metric is kind of arbitrary and could be tuned.
# For this one, I'm giving equal penalty to deviations from the target mean and the
# target standard deviation. If fitting the target mean was twice as important as
# fitting the target std, you could use:
#    return(2*abs(mean-target_mean) + abs(std-target_std))
# Lower scores are better than higher scores. If you redefined the scoring function
# to make high scores better, then you would need to do a reverse sort in the for loop below.
calculate_score <- function(mean, target_mean, std, target_std) {
    return(abs(mean-target_mean) + abs(std-target_std))
}

# Make up some data. This will have a different distribution than what we are looking for.
df = data.frame(x=rnorm(100), y=rnorm(100))

# The matrix saved_subsamples will stores the best subsamples, but it will start off blank.
# A corresponding dataframe below will store the scores (subsample_metrics).
# We'll keep saved_subsamples and subsample_metrics synchronized so that row 1 in one
# always corresponds to row 1 of the other.
saved_subsamples = matrix(nrow=num_subsamples_to_keep, ncol=subsample_size)

# Store the metrics of a subsample's quality in this data frame.
# We'll keep the rows of this synchronized with saved_subsamples and
# keep them both sorted so the worst saved subsample is always in the last row
# When we find a new subsample that's better than the worst known, we'll save
# it and resort the matrix and dataframe.
subsample_metrics = data.frame(mean=matrix(NaN, nrow=num_subsamples_to_keep), std=matrix(NaN, nrow=num_subsamples_to_keep), score=matrix(NaN, nrow=num_subsamples_to_keep))

# Try a bunch of different subsamples and keep the best ones
for (attempt in 1:num_subsamples_to_try) {
    # Pick a new subsample and evaluate it.
    subsample = sample(nrow(df),size=subsample_size)
    subsample_mean = mean(df[subsample,'x'])
    subsample_std = sd(df[subsample,'x'])
    subsample_score = calculate_score(subsample_mean, target_mean, subsample_std, target_std)
    # If we don't have any subsamples yet (worst score is NA), or if this new
    # subsample is better than our worst saved subsample, then overwrite our
    # worst subsample from the end and re-order the lists.
    if( is.na(subsample_metrics[nrow(subsample_metrics),'score']) ||
            subsample_score < subsample_metrics[nrow(subsample_metrics),'score'] ) {
        # Overwrite the worst saved subsample (row 1)
        subsample_metrics[nrow(subsample_metrics),'mean'] = subsample_mean
        subsample_metrics[nrow(subsample_metrics),'std'] = subsample_std
        subsample_metrics[nrow(subsample_metrics),'score'] = subsample_score
        # Transpose the subsample so it fits in one row instead of one column
        saved_subsamples[nrow(saved_subsamples),] = t(subsample)
        # Reorder the saved subsamples (and corresponding metrics) so the worst
        # scores (the largest) are at the bottom of the list.
        new_order = order(subsample_metrics$score)
        saved_subsamples = saved_subsamples[new_order,]
        subsample_metrics = subsample_metrics[new_order,]
    }
}

# Look at the top subsamples found & their scores
print(subsample_metrics)
print(saved_subsamples)

# Retrieve the top-scoring subsample from the end of the list
top_subsample_indexes = saved_subsamples[1,]
# Use that to subsample the original dataset
top_subsample = df[top_subsample_indexes,]


3
100
1000
10000

1
10000


10
100
1000
10000
10
1000
80
74
100000
9999
17860


1000
232
4828
189
8070
3205
5195
4945
840
6309
2693
4678
6805
9092
5049
5192
3763
9113
344
6831
9184
1287
4052
2799
3122
1209
31
2090
7029
5120
9550
3722
8252
376
9917
7826
929
9397
1618
927
664
7017
1002
7235
2139
5667
3649
5227
5841
5578
2049
8783
2647
7312
149
5342
2654
2178
6432
9120
7774
1958
6649
6229
5915
3245
7085
9763
8281
3110
9396
7339
358
2336
8376
436
1349
9576
4763
4874
6608
4858
6222
4381
2364
3585
978
4635
2409
2965
190
3550
1951
1098
7189
4603
4650
5301
3908
3951
5101
1772
7706
6090
8145
6678
5756
5567
4442
4584
4854
2093
7094
9281
2858
6350
3994
468
8046
669
6583
7076
2678
8363
7108
7487
2519
9369
3750
8529
4936
462
7757
8798
4989
4593
2545
2963
6303
2768
5867
2855
1091
3493
2756
8021
1531
9560
8605
3090
3024
9140
9034
1819
8262
8348
5448
8051
9983
5508
3103
1909
9345
3010
1424
5441
6402
1358
4769
5885
8871
1360
5467
6034
5512
4677
9973
781
801
9972
3304
6000
8329
1750
6479
1005
1408
1642
6734
8542
546
7426
374
7078
9384
3263
3798
8379
2370
5774
9088
9848
9848
4599
6665
5005
8912
2609
9067
7429
1057
673
6736
3245
1081
4107
8728
4598
5124
3195
8792
2059
9545
8031
9934
6873
6548
8881
8678
5062
6883
6700
3603
3995
4786
4985
1383
8771
5310
3302
7612
30
9706
4896
8944
7016
163
5637
7709
9840
1213
9201
140
2517
1593
3931
4529
4156
6775
5
6260
9090
9557
1763
2425
7903
3248
8869
39
494
9608
1756
8273
9143
1660
1296
6992
4307
9541
118
909
8218
6346
2961
1230
1942
9440
6621
4327
9410
2179
5716
8
8131
166
9151
395
9825
6171
3586
4069
5997
7782
4385
9127
2707
2288
1658
3099
6054
4058
8736
7309
4917
690
3237
8231
232
5437
6172
8511
842
5269
3075
6048
4312
5668
1953
265
7381
5718
7052
940
4822
9521
3958
6482
7328
2921
1167
5272
8794
7696
5668
5862
793
8984
5140
9278
7433
5415
7403
9347
6939
5691
8573
5064
7112
9779
4927
2406
778
7624
9912
1643
3724
3412
7015
203
2164
8820
1138
455
8814
4397
6099
6408
6829
4178
3496
3233
8527
5122
8565
8751
1596
9441
2164
6659
8784
4991
3838
6997
8517
6058
141
717
2717
4590
3818
1523
5226
9658
4266
144
8797
1336
6812
3141
1114
3501
8701
936
695
9132
2530
7366
1665
612
3721
6261
2239
7109
7245
8733
5626
974
155
8749
3588
4921
763
3382
2243
2496
2371
8532
6978
4717
9225
548
8274
7083
5115
8973
3084
2269
458
6130
7069
5594
2065
4495
1441
2314
822
4009
4345
7953
6453
7402
932
5658
5321
3242
7976
7250
6636
3156
8788
8070
4961
1856
1477
9063
1905
5950
9107
3502
7988
354
3386
9837
6433
9070
4326
6676
4144
623
7357
587
1729
6897
5665
2608
3479
8402
86
4699
364
7999
1016
3038
3891
9984
6849
1182
6425
1224
1209
2389
3932
6284
6923
7059
495
9172
8191
8225
23
9971
3499
5290
9470
6046
1067
3796
9650
3836
5430
6930
4197
9160
8436
2657
4700
998
484
8881
101
6175
8118
7970
1427
196
2322
975
8818
2342
7598
1472
6283
1765
5965
8691
1115
4749
1286
9636
9129
2496
8943
346
3894
2968
2994
7165
7943
28
7863
9927
6763
7979
4666
205
1640
9929
2631
9523
5899
3850
4768
4444
98
1187
3034
7465
5627
9008
2379
5601
3005
8148
4951
1117
550
6617
5419
2287
1603
9745
5858
5499
3558
5851
4022
3857
9940
9008
1907
1617
7621
8602
2488
8251
4767
8625
1270
693
1656
8444
5833
7371
5596
697
1009
3179
3342
1316
9401
16
9132
1312
7159
3788
4283
9806
2493
4946
4594
3171
294
6335
5276
5515
9505
9106
9048
1864
1238
4707
2125
6291
4593
8519
4395
3989
4242
8706
4791
7901
8232
1917
41
7791
7260
6113
5274
1935
6786
9640
7919
9459
1614
4687
2040
4393
8444
2875
8950
760
5722
465
1372
1919
1580
670
2485
6161
194
1094
8485
4999
3954
4911
2911
145
3916
5523
3770
135
3797
5685
9995
7800
3457
3815
1977
5322
6182
2106
2043
4462
439
3377
4753
5833
721
6155
3476
2443
4147
419
9337
9629
9009
9571
996
5633
9095
7890
8778
4398
2870
6302
4830
5063
9762
3736
1532
556
6766
5586
4256
1103
7234
5681
776
7197
476
3204
8941
486
4974
1439
6323
370
403
913
247
8800
3465
5527
4456
5560
585
6626
9038
1637
5921
6567
3523
8887
6809
379
9203
9985
9820
1289
5701
3834
9857
3582
8346
8182
1471
4065
7726
2963
6328
1671
9877
4902
3329
3278
5957
6556
8022
2609
3041
503
6341
8255
3636
2560
3392
6351
9977
6303
1974
3129
683
4731
6972
2778
1478
4002
1189
6335
8882
8472
5349
8111
5437
5848
108
7126
7825
6187
559
2434
4724
8806
4556
2805
9418
6615
4457
3238
3457
8308
8242
3020
1367
5062
23
2655
3372
9787
1784
9898
2429
3915
8022
8314
4338
8666
2293
5306
4852
5372
112
442
5637
1940
5800
8997
1781
815
1723
161
7107
7033
7180
4006
25
3690
844
6627
1758
6108
4847
7990
1036
5379
1069
2963
3932
6440
9914
1895
5439
5916
9939
3535
9667
91
2106
9639
8969
3996
6064
7677
8307
8472
7039
5223
166
3173
936
7323
6979
54
2245
5912
2664
3679
4003
8626
2066
1757
1510
2919
7481
1767
1918
107
4229
7332
9879
3278
3093
978
5434
2335
6134
8289
3991
9245
3658
2283
9974
6748
4433
5570
4953
4007
8300
2479
8302
3577
129
2650
3563
4964
6730
2767
6286
1442
3928
3200
10
8422
9082
1929
5248
3685
5682
9009
2839
1944
353
1010
6858
8950
9490
6290
4403
3144
2214
8928
9053
6047
8616
1058
2496
6270
7656
931
3962
5644
6763
6744
425
294
6216
4265
1293
3852
4864
9715
